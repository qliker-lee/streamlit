# dq_report_html.py
import os, json
import pandas as pd

CSS = """
<style>
body { font-family: system-ui, -apple-system, Segoe UI, Roboto, 'Noto Sans KR', Arial; margin: 24px; }
h1 { margin: 0 0 16px 0; }
.kpi { display:flex; gap:16px; margin: 6px 0 20px; flex-wrap: wrap; }
.card { border:1px solid #eee; border-radius:12px; padding:12px 16px; min-width: 220px; box-shadow: 0 1px 3px rgba(0,0,0,.05);}
.card h3 { margin:0 0 4px 0; font-size: 14px; color:#666; }
.card .num { font-size: 24px; font-weight:700; }
section { margin: 16px 0 28px; }
table { border-collapse: collapse; width:100%; }
th, td { border-bottom:1px solid #eee; padding:8px 10px; text-align:left; font-size: 13px;}
th { background:#fafafa; }
.bad { color:#b00020; font-weight:600; }
.ok { color:#1b5e20; font-weight:600; }
.small { color:#666; font-size:12px; }
</style>
"""

def _safe_table(df: pd.DataFrame, cols: list, limit=20) -> str:
    if df is None or df.empty: 
        return "<div class='small'>No data</div>"
    d = df.loc[:, [c for c in cols if c in df.columns]].head(limit).copy()
    return d.to_html(index=False, border=0, classes="tbl")

def render_summary_html(
    out_path: str,
    title: str,
    scored_df: pd.DataFrame,
    reports: dict | None = None,
    drift_df: pd.DataFrame | None = None,
    dist_drift_df: pd.DataFrame | None = None,
    rule_report_df: pd.DataFrame | None = None
):
    os.makedirs(os.path.dirname(out_path), exist_ok=True)

    # KPIs
    total_cols = 0 if scored_df is None or scored_df.empty else len(scored_df)
    avg_score  = 0 if total_cols==0 else round(scored_df["DQ_Score"].mean(),2)
    issue_cols = 0 if total_cols==0 else int((scored_df["Issue_Count"]>0).sum())
    drift_cols = 0 if (drift_df is None or drift_df.empty) else int((drift_df["Drift"]!="Stable").sum())
    rule_cols  = 0 if (rule_report_df is None or rule_report_df.empty) else \
                 rule_report_df.groupby(["FileName","ColumnName"])["Fail(%)"].max().gt(0).sum()

    # Top 문제 컬럼(점수 낮은 순)
    worst = None
    if reports and "worst_columns" in reports:
        worst = reports["worst_columns"]
    elif scored_df is not None and not scored_df.empty:
        worst = (scored_df.sort_values(["DQ_Score"], ascending=True)
                 [["FileName","ColumnName","DQ_Score","DQ_Issues"]])

    # Drift 상위
    drift_top = None
    if drift_df is not None and not drift_df.empty:
        drift_top = drift_df.sort_values(["PSI_Composite"], ascending=False)\
                            [["FileName","ColumnName","PSI_Composite","Drift"]]
    # Distribution Drift 상위
    dist_top = None
    if dist_drift_df is not None and not dist_drift_df.empty:
        dist_top = (dist_drift_df.sort_values(["PSI"], ascending=False)
                    [["FileName","ColumnName","DistType","PSI","Drift"]])

    # Rule 실패 상위
    rule_top = None
    if rule_report_df is not None and not rule_report_df.empty:
        rule_top = (rule_report_df.sort_values(["Fail(%)"], ascending=False)
                    [["FileName","ColumnName","Severity","Fail(%)","Messages"]])

    html = [f"<html><head><meta charset='utf-8'>{CSS}</head><body>"]
    html += [f"<h1>{title}</h1>"]
    html += ["<div class='kpi'>",
             f"<div class='card'><h3>Total columns</h3><div class='num'>{total_cols}</div></div>",
             f"<div class='card'><h3>Average DQ Score</h3><div class='num'>{avg_score}</div></div>",
             f"<div class='card'><h3>Columns with Issues</h3><div class='num'>{issue_cols}</div></div>",
             f"<div class='card'><h3>Drifted Columns</h3><div class='num'>{drift_cols}</div></div>",
             f"<div class='card'><h3>Rule-Failing Columns</h3><div class='num'>{rule_cols}</div></div>",
             "</div>"]

    html += ["<section><h2>Worst Columns (by DQ Score)</h2>",
             _safe_table(worst, ["FileName","ColumnName","DQ_Score","DQ_Issues"]),
             "</section>"]

    html += ["<section><h2>Proxy-PSI Drift (Top)</h2>",
             _safe_table(drift_top, ["FileName","ColumnName","PSI_Composite","Drift"]),
             "</section>"]

    html += ["<section><h2>Distribution Drift (Top)</h2>",
             _safe_table(dist_top, ["FileName","ColumnName","DistType","PSI","Drift"]),
             "</section>"]

    html += ["<section><h2>Rule Failures (Top)</h2>",
             _safe_table(rule_top, ["FileName","ColumnName","Severity","Fail(%)","Messages"]),
             "</section>"]

    html += ["<div class='small'>Generated by DQ pipeline</div>"]
    html += ["</body></html>"]

    with open(out_path, "w", encoding="utf-8") as f:
        f.write("\n".join(html))
    return out_path
