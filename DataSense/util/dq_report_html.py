# dq_report_html.py
from __future__ import annotations
import json
import pandas as pd
from pathlib import Path

CSS = """
body{font-family:ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial; margin:20px;color:#111}
h1{font-size:24px;margin:0 0 12px}
h2{font-size:18px;margin:24px 0 8px}
.kpi{display:flex;gap:12px;flex-wrap:wrap;margin:8px 0 16px}
.card{border:1px solid #e5e7eb;border-radius:10px;padding:12px;min-width:200px;box-shadow:0 1px 2px rgba(0,0,0,.04)}
.card h3{font-size:13px;margin:0 0 4px;color:#374151}
.card .v{font-size:20px;font-weight:700}
table{border-collapse:collapse;width:100%;margin:6px 0 18px;background:#fff}
th,td{border:1px solid #e5e7eb;padding:8px 10px;text-align:left;font-size:13px}
th{background:#f3f4f6}
.badge{display:inline-block;padding:2px 8px;border-radius:999px;font-size:12px;border:1px solid #e5e7eb;background:#f9fafb}
.small{color:#6b7280;font-size:12px}
"""

def _fmt(v):
    if isinstance(v, float):
        return f"{v:,.2f}"
    return str(v)

def _table_html(df: pd.DataFrame, max_rows=100) -> str:
    if df is None or df.empty:
        return "<div class='small'>No data</div>"
    dfx = df.head(max_rows).copy()
    # 일부 수치 컬럼 포맷
    for c in dfx.columns:
        if dfx[c].dtype.kind in "f" and c.endswith("(%)"):
            dfx[c] = dfx[c].map(lambda x: f"{x:.2f}")
        elif dfx[c].dtype.kind in "f":
            dfx[c] = dfx[c].map(lambda x: f"{x:.2f}")
    thead = "<tr>" + "".join(f"<th>{c}</th>" for c in dfx.columns) + "</tr>"
    rows = []
    for _, r in dfx.iterrows():
        tds = "".join(f"<td>{_fmt(r[c])}</td>" for c in dfx.columns)
        rows.append(f"<tr>{tds}</tr>")
    tbody = "\n".join(rows)
    return f"<table><thead>{thead}</thead><tbody>{tbody}</tbody></table>"

def render_summary_html(out_path: str,
                        title: str,
                        scored_df: pd.DataFrame,
                        reports: dict,
                        drift_df: pd.DataFrame | None = None,
                        dist_drift_df: pd.DataFrame | None = None,
                        rule_report_df: pd.DataFrame | None = None) -> None:
    Path(out_path).parent.mkdir(parents=True, exist_ok=True)

    avg_score = round(float(scored_df["DQ_Score"].mean()), 2) if not scored_df.empty else 0.0
    worst = scored_df.nsmallest(1, "DQ_Score") if not scored_df.empty else pd.DataFrame()
    worst_label = ""
    if not worst.empty:
        w = worst.iloc[0]
        worst_label = f"{w['FileName']} · {w['ColumnName']} ({w['DQ_Score']:.2f})"

    n_cols = len(scored_df) if scored_df is not None else 0
    n_issues = int((scored_df["Issue_Count"] > 0).sum()) if "Issue_Count" in scored_df.columns else 0
    n_rules = len(rule_report_df) if rule_report_df is not None else 0
    n_drift = 0
    if drift_df is not None and not drift_df.empty:
        n_drift = int((drift_df["Drift"] == "Significant").sum())
    if dist_drift_df is not None and not dist_drift_df.empty:
        n_drift += int((dist_drift_df["Drift"] == "Significant").sum())

    worst_cols = reports.get("worst_columns")
    by_file = reports.get("by_file")
    issue_catalog = reports.get("issue_catalog")

    html = f"""
<!DOCTYPE html>
<html lang="ko">
<meta charset="utf-8"/>
<title>{title}</title>
<style>{CSS}</style>
<body>
  <h1>{title}</h1>

  <div class="kpi">
    <div class="card"><h3>Average DQ Score</h3><div class="v">{avg_score:.2f}</div></div>
    <div class="card"><h3>Total Columns</h3><div class="v">{n_cols}</div></div>
    <div class="card"><h3>Columns with Issues</h3><div class="v">{n_issues}</div></div>
    <div class="card"><h3>Rule Fail Rows</h3><div class="v">{n_rules}</div></div>
    <div class="card"><h3>Significant Drift Count</h3><div class="v">{n_drift}</div></div>
    <div class="card"><h3>Worst Column</h3><div class="v">{worst_label or '-'}</div></div>
  </div>

  <h2>Top Issues (Worst Columns)</h2>
  { _table_html(worst_cols, max_rows=50) }

  <h2>By File Summary</h2>
  { _table_html(by_file, max_rows=200) }

  <h2>Issue Catalog</h2>
  { _table_html(issue_catalog, max_rows=50) }

  <h2>Rule Failures</h2>
  { _table_html(rule_report_df, max_rows=300) }

  <h2>Proxy Drift (PSI-Composite)</h2>
  { _table_html(drift_df, max_rows=200) }

  <h2>Distribution Drift (PSI on Snapshots)</h2>
  { _table_html(dist_drift_df, max_rows=200) }

  <div class="small">Generated by dq_report_html.py</div>
</body>
</html>
"""
    with open(out_path, "w", encoding="utf-8") as f:
        f.write(html)
