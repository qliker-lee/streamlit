# function/erd_from_mapping.py
# -*- coding: utf-8 -*-
"""
Code Relationship Diagram ÏÉùÏÑ± (CodeMapping Í≤∞Í≥º Í∏∞Î∞ò, Îã®Ïùº DataFrame ÏûÖÎ†•)
- ÌïÑÏàò Ïª¨Îüº: FileName, ColumnName, FK('FK'), CodeColumn_1, CodeType_1
- ÏÑ†ÌÉù Ïª¨Îüº: PK(1/True/'Y'), CodeFile_1(Ï∞∏Ï°∞ ÎåÄÏÉÅ ÌÖåÏù¥Î∏î)
- ÎÖ∏Îìú ÏÉâ/ÌïÑÌÑ∞Îäî CodeFile_1(ÌÉÄÍ≤ü ÌÖåÏù¥Î∏î)Ïùò CodeType_1ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú ÎèôÏûë
"""
from __future__ import annotations
from pathlib import Path
from typing import Dict, List, Optional, Set, Tuple

import pandas as pd
import streamlit as st
from PIL import Image
from graphviz import Digraph

# ------------------------------
# Ïú†Ìã∏
# ------------------------------
def _norm_cols(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df.columns = [str(c).replace("\ufeff", "").strip() for c in df.columns]
    return df

def _to_set(x: pd.Series) -> Set[str]:
    return set(str(v).strip() for v in x.dropna().astype(str) if str(v).strip() != "")

def _norm_codetype(x: str) -> str:
    s = str(x or "").strip().upper()
    alias = {
        "MASTER": "MASTER",
        "OP": "OPERATION", "OPER": "OPERATION",
        "REF": "REFERENCE",
        "ATTR": "ATTRIBUTE",
        "VALID": "VALIDATE", "VAL": "VALIDATE",
        "RULES": "RULE",
        "COMMONS": "COMMON",
    }
    return alias.get(s, s) if s else "OTHER"

# ÌÖåÏù¥Î∏î ÎåÄÌëú ÌÉÄÏûÖ ÏÑ†ÌÉù Ïö∞ÏÑ†ÏàúÏúÑ(ÌÉÄÍ≤ü/ÏÜåÏä§ Î™®Îëê Í≥µÌÜµ ÏÇ¨Ïö©)
_NODE_TYPE_PRIORITY = ["MASTER", "OPERATION", "REFERENCE", "VALIDATE", "RULE", "ATTRIBUTE", "COMMON", "OTHER"]

# ------------------------------
# PK Îßµ
# ------------------------------
def _build_pk_map(df_pk_source: pd.DataFrame) -> Tuple[Dict[str, Set[str]], Dict[Tuple[str, str], bool]]:
    req = {"FileName", "ColumnName", "PK"}
    if not req.issubset(df_pk_source.columns):
        return {}, {}
    df = _norm_cols(df_pk_source)
    flag = (
        df["PK"].astype(str).str.upper().isin(["1", "Y", "TRUE"])
        | (pd.to_numeric(df["PK"], errors="coerce").fillna(0) == 1)
    )
    df_pk = df.loc[flag, ["FileName", "ColumnName"]].dropna().copy()

    pk_map: Dict[str, Set[str]] = {}
    pk_lookup: Dict[Tuple[str, str], bool] = {}
    for tname, g in df_pk.groupby("FileName"):
        cols = _to_set(g["ColumnName"])
        if cols:
            pk_map[tname] = cols
            for c in cols:
                pk_lookup[(tname, c)] = True
    return pk_map, pk_lookup

# ------------------------------
# Í∑∏ÎûòÌîÑ Îç∞Ïù¥ÌÑ∞ (ÏÉâ/ÌïÑÌÑ∞ = CodeFile_1 Í∏∞Ï§Ä)
# ------------------------------
def _build_graph_data(
    df_cm_raw: pd.DataFrame,
    pk_map: Dict[str, Set[str]],
    pk_lookup: Dict[Tuple[str, str], bool],
) -> Tuple[
    Dict[str, List[str]],
    List[Tuple[str, str, str, str]],
    Dict[str, str],            # node_types_final
    Dict[str, str],            # node_types_target (CodeFile_1Í∏∞Ï§Ä)
]:
    """
    Î∞òÌôò:
      - columns_by_table: {table -> [columns...]}
      - edges: [(src_table, tgt_table, pk_col_name, edge_code_type)]
      - node_types_final: {table -> ÎåÄÌëú ÌÉÄÏûÖ}  (ÌÉÄÍ≤ü ÌÉÄÏûÖ Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ ÏÜåÏä§ ÌÉÄÏûÖ, ÏóÜÏúºÎ©¥ OTHER)
      - node_types_target: {table -> ÎåÄÌëú ÌÉÄÏûÖ} (Ïò§ÏßÅ CodeFile_1 Í∏∞Ï§Ä; ÌïÑÌÑ∞Ïóê ÏÇ¨Ïö©)
    """
    need = {"FileName", "ColumnName", "FK", "CodeColumn_1", "CodeType_1"}
    missing = need - set(df_cm_raw.columns)
    if missing:
        raise ValueError(f"[CRD] ÌïÑÏöîÌïú Ïª¨Îüº ÎàÑÎùΩ: {sorted(missing)}")

    df = _norm_cols(df_cm_raw).copy()
    df["CodeType_1"] = df["CodeType_1"].map(_norm_codetype)

    # ÌÖåÏù¥Î∏î-Ïª¨Îüº(ÏÜåÏä§ Í∏∞Ï§Ä Ïö∞ÏÑ† ÏàòÏßë)
    columns_by_table: Dict[str, Set[str]] = {}
    for tname, g in df.groupby("FileName"):
        columns_by_table.setdefault(tname, set()).update(_to_set(g["ColumnName"]))
    # PK Ï∂îÍ∞Ä
    for t, pkcols in pk_map.items():
        columns_by_table.setdefault(t, set()).update(pkcols)

    # ÌÉÄÏûÖ ÏßëÍ≥Ñ: (A) ÌÉÄÍ≤ü Í∏∞Ï§Ä(= CodeFile_1), (B) ÏÜåÏä§ Í∏∞Ï§Ä(= FileName)
    node_types_target: Dict[str, str] = {}
    if "CodeFile_1" in df.columns:
        for tname, g in df.dropna(subset=["CodeFile_1"]).groupby("CodeFile_1"):
            types = { _norm_codetype(x) for x in _to_set(g["CodeType_1"]) }
            # Ïö∞ÏÑ†ÏàúÏúÑÏóê Îî∞Îùº ÎåÄÌëú ÌÉÄÏûÖ ÏÑ†ÌÉù
            chosen = next((t for t in _NODE_TYPE_PRIORITY if t in types), "OTHER")
            node_types_target[str(tname).strip()] = chosen

    node_types_source: Dict[str, str] = {}
    for tname, g in df.groupby("FileName"):
        types = { _norm_codetype(x) for x in _to_set(g["CodeType_1"]) }
        chosen = next((t for t in _NODE_TYPE_PRIORITY if t in types), "OTHER")
        node_types_source[str(tname).strip()] = chosen

    # PK Ïª¨Îüº ÏÜåÏú† ÌÖåÏù¥Î∏î Ïó≠Ï∂îÏ†Å/Ìè¥Î∞±
    col_to_pk_tables: Dict[str, Set[str]] = {}
    for t, cols in pk_map.items():
        for c in cols:
            col_to_pk_tables.setdefault(c, set()).add(t)
    col_to_tables: Dict[str, Set[str]] = {}
    for tname, g in df.groupby("FileName"):
        for c in _to_set(g["ColumnName"]):
            col_to_tables.setdefault(c, set()).add(tname)

    # FK ‚Üí Ïó£ÏßÄ/ÌÉÄÍ≤ü Ïª¨Îüº Î≥¥Í∞ï
    use_cols = ["FileName", "ColumnName", "CodeColumn_1", "CodeType_1"] + (["CodeFile_1"] if "CodeFile_1" in df.columns else [])
    fk_mask = df["FK"].astype(str).str.upper().eq("FK")
    df_fk = df.loc[fk_mask, use_cols].dropna(subset=["FileName", "ColumnName", "CodeColumn_1", "CodeType_1"]).copy()

    edges: Set[Tuple[str, str, str, str]] = set()
    for _, r in df_fk.iterrows():
        src_t = str(r["FileName"]).strip()
        src_c = str(r["ColumnName"]).strip()
        tgt_pk_col = str(r["CodeColumn_1"]).strip()
        edge_type = _norm_codetype(r["CodeType_1"])

        tgt_candidates: Set[str] = set()
        if "CodeFile_1" in r.index and pd.notna(r["CodeFile_1"]):
            tf = str(r["CodeFile_1"]).strip()
            if tf:
                tgt_candidates.add(tf)
        if not tgt_candidates:
            tgt_candidates = col_to_pk_tables.get(tgt_pk_col, set())
        if not tgt_candidates:
            tgt_candidates = col_to_tables.get(tgt_pk_col, set())

        if not tgt_candidates:
            columns_by_table.setdefault(src_t, set()).add(src_c)
            continue

        for tgt_t in tgt_candidates:
            tgt_t = str(tgt_t).strip()
            edges.add((src_t, tgt_t, tgt_pk_col, edge_type, src_c))
            columns_by_table.setdefault(tgt_t, set()).add(tgt_pk_col)  # ÌÉÄÍ≤üÏóêÎèÑ PK Ïª¨Îüº Î≥¥Í∞ï

    # ÎÖ∏Îìú ÎåÄÌëú ÌÉÄÏûÖ: ÌÉÄÍ≤ü ÌÉÄÏûÖ Ïö∞ÏÑ†, ÏóÜÏúºÎ©¥ ÏÜåÏä§ ÌÉÄÏûÖ, ÏóÜÏúºÎ©¥ OTHER
    all_nodes = set(columns_by_table.keys()) | {e[0] for e in edges} | {e[1] for e in edges}
    node_types_final: Dict[str, str] = {}
    for t in all_nodes:
        node_types_final[t] = node_types_target.get(t) or node_types_source.get(t) or "OTHER"

    # Î¶¨Ïä§Ìä∏Ìôî/Ï†ïÎ†¨
    columns_by_table_list: Dict[str, List[str]] = {
        t: sorted(cols, key=lambda x: (0 if pk_lookup.get((t, x), False) else 1, x.upper()))
        for t, cols in columns_by_table.items()
    }
    edge_list = sorted(list(edges))
    return columns_by_table_list, edge_list, node_types_final, node_types_target

# ------------------------------
# Graphviz Î†åÎçîÎßÅ
# ------------------------------
def _render_erd(
    columns_by_table: Dict[str, List[str]],
    pk_lookup: Dict[Tuple[str, str], bool],
    edges: List[Tuple[str, str, str, str, str]],
    node_types: Dict[str, str],
    out_dir: Optional[Path] = None
) -> Path:
    out_dir = out_dir or (Path.cwd() / "QDQM_Master_Code" / "QDQM_Output")
    out_dir.mkdir(parents=True, exist_ok=True)
    png_path = out_dir / "CodeMapping_ERD.png"

        # metric_colors = {
        #     "Master":   "#ff7f0e",     # Ï£ºÌô©ÏÉâ
        #     "Operation": "#2ca02c",    # Ï¥àÎ°ùÏÉâ
        #     "Reference": "#84994f",    # ÎÖπÏÉâ
        #     "Attribute": "#d62728",    # Îπ®Í∞ÑÏÉâ
        #     "Common":     "#9467bd",   # Î≥¥ÎùºÏÉâ
        #     "Validation": "#a7aae1"    # Î∏îÎ£®
        # }

    node_color = {
        "MASTER" :   "#9ecad6", # ÌïòÎäòÏÉâ
        "OPERATION": "#2ca02c", # Îπ®Í∞ï
        "REFERENCE": "#f4991a", # Ïï∞Î≤Ñ
        "INTERNAL":  "#ff7f0e", # Ï£ºÌô©
        "RULE":      "#9467bd", # Î≥¥Îùº
        "VALIDATE":  "#ffde63", # ÎÖ∏Îûë
        "ATTRIBUTE": "#d62728",
        "COMMON":    "#9467bd",
        "OTHER":     "#D3DA99",
    }

    edge_color = {
        "MASTER" :   "#9ecad6",
        "OPERATION": "#2ca02c",
        "REFERENCE": "#f4991a",
        "INTERNAL":  "#ff7f0e",
        "RULE":      "#9467bd",
        "VALIDATE":  "#ffde63",
        "ATTRIBUTE": "#d62728",
        "COMMON":    "#9467bd",
        "OTHER":     "#D3DA99",
    }

    dot = Digraph(comment="CodeMapping Code Relationship Diagram", encoding="utf-8")
    dot.attr(rankdir="LR", nodesep="0.5", ranksep="3", concentrate="true",
             overlap="scale", splines="curved", fontsize="12")
    dot.attr(size="10,10", ratio="auto")
    dot.attr("node", fontname="NanumGothic")
    dot.attr("edge", fontname="NanumGothic")

    # ÎÖ∏Îìú
    for tname in sorted(columns_by_table.keys()):
        cols = columns_by_table[tname]
        head = node_color.get(_norm_codetype(node_types.get(tname, "OTHER")), "#c7c7c7")

        label = ['<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">']
        label.append(f'<TR><TD PORT="title" BGCOLOR="{head}"><B>{tname}</B></TD></TR>')

        # PK Î®ºÏ†Ä
        for col in cols:
            if pk_lookup.get((tname, col), False):
                safe = (col or "").replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")
                label.append(f'<TR><TD ALIGN="LEFT" BGCOLOR="#E6E6FA" PORT="{safe}"><B>üîë {safe}</B></TD></TR>')
        # ÎÇòÎ®∏ÏßÄ
        for col in cols:
            if pk_lookup.get((tname, col), False):
                continue
            safe = (col or "").replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")
            label.append(f'<TR><TD ALIGN="LEFT" PORT="{safe}">{safe}</TD></TR>')

        label.append("</TABLE>>")
        dot.node(tname, "\n".join(label), shape="none")

    # Ïó£ÏßÄ
    dot.attr('edge', minlen='1')
    # for src_t, tgt_t, pk_col, code_type in edges:
    #     safe = (pk_col or "").replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")
    #     color = edge_color.get(_norm_codetype(code_type), "#7f7f7f")
    #     # color = edge_color.get(_norm_codetype(code_type), "#99ff68")
    #     dot.edge(src_t, f"{tgt_t}:{safe}",
    #              fontsize="10", dir="both", arrowhead="none", arrowtail="crow",
    #              constraint="true", labeldistance="1.1", labelfloat="true",
    #              penwidth="1.2", color=color)

    for e in edges:
        if len(e) == 4:
            src_t, tgt_t, pk_col, code_type = e
        else:
            src_t, tgt_t, pk_col, code_type, _src_col = e  # src_colÏùÄ ÏãúÍ∞ÅÌôîÏóê ÏÇ¨Ïö© ÏïàÌï®
        safe = (pk_col or "").replace("&","&amp;").replace("<","&lt;").replace(">","&gt;")
        color = edge_color.get(_norm_codetype(code_type), "#7f7f7f")
        dot.edge(src_t, f"{tgt_t}:{safe}",
                fontsize="10", dir="both", arrowhead="none", arrowtail="crow",
                constraint="true", labeldistance="1.1", labelfloat="true",
                penwidth="1.2", color=color)

    dot.attr(dpi="300")
    dot.render(str(png_path.with_suffix("")), format="png", cleanup=True)
    return png_path

# ------------------------------
# Ï∫êÏãú: FK Ìëú
# ------------------------------
@st.cache_data(show_spinner=False)
def _to_fk_df_cached(edges_tuple: Tuple[Tuple, ...]) -> pd.DataFrame:
    rows = []
    for e in edges_tuple:
        if len(e) == 4:
            src_t, tgt_t, pk_col, code_type = e
            src_col = ""
        else:
            src_t, tgt_t, pk_col, code_type, src_col = e
        rows.append({
            "From(FileName)": src_t,
            "FK (ColumnName)": src_col,          # üëà Ï∂îÍ∞Ä
            "To (CodeFile)": tgt_t,
            "PK Column(CodeColumn)": pk_col,
            "CodeType": code_type,
        })
    return pd.DataFrame(rows)

# ------------------------------
# Í≥µÍ∞ú API
# ------------------------------
# Display_ERD ÏãúÍ∑∏ÎãàÏ≤òÏóê view_mode Ï∂îÍ∞Ä
def Display_ERD(
    erd_df: pd.DataFrame,
    *,
    out_dir: Optional[Path] = None,
    img_width: int = 680,
    view_mode: str = "All",   # üëà Ï∂îÍ∞Ä
) -> None:
    ...
    df_cm = _norm_cols(erd_df).copy()
    if "CodeType_1" not in df_cm.columns:
        st.error("erd_df Ïóê 'CodeType_1' Ïª¨ÎüºÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
        return
    df_cm["CodeType_1"] = df_cm["CodeType_1"].map(_norm_codetype)

    # PK ÎèôÏûë ÎèôÏùº
    df_pk = df_cm[["FileName","ColumnName","PK"]].copy() \
        if {"FileName","ColumnName","PK"}.issubset(df_cm.columns) \
        else pd.DataFrame(columns=["FileName","ColumnName","PK"])

    pk_map, pk_lookup = _build_pk_map(df_pk)
    try:
        columns_by_table, edges, node_types_final, node_types_target = _build_graph_data(
            df_cm, pk_map, pk_lookup
        )
    except ValueError as e:
        st.error(str(e)); return

    # üëá Ïô∏Î∂ÄÏóêÏÑú Î∞õÏùÄ view_mode Î°ú ÌïÑÌÑ∞ÎßÅ
    view_mode_norm = _norm_codetype(view_mode)
    if view_mode_norm not in {"ALL", "OPERATION", "REFERENCE"}:
        view_mode_norm = "ALL"

    if view_mode_norm != "ALL":
        target_nodes = {t for t, ttype in node_types_target.items() if ttype == view_mode_norm}
        if not target_nodes:
            st.info(f"{view_mode} ÌÉÄÏûÖÏùò ÌÉÄÍ≤ü(CodeFile_1) ÎÖ∏ÎìúÍ∞Ä ÏóÜÏäµÎãàÎã§.")
            return
        keep_nodes = set(target_nodes)
        for s, t, *_ in edges:
            if t in target_nodes:
                keep_nodes.add(s)
        columns_by_table = {t: cols for t, cols in columns_by_table.items() if t in keep_nodes}
        node_types_final = {t: node_types_final.get(t, "OTHER") for t in keep_nodes}
        edges = [e for e in edges if (e[0] in keep_nodes and e[1] in keep_nodes)]

    # KPI/ÏöîÏïΩ/Ïù¥ÎØ∏ÏßÄ Î†åÎçî(Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú)
    st.markdown("### Code Relationship Diagram (ÏÑ†ÌÉùÌïú CodeMapping Í∏∞Î∞ò)")
    st.write(f"- ÎåÄÏÉÅ ÎÖ∏Îìú Ïàò: **{len(columns_by_table):,}**, Ïó£ÏßÄ Ïàò: **{len(edges):,}**")
    st.caption("ÎÖ∏Îìú ÏÉâÏùÄ CodeFile_1(ÌÉÄÍ≤ü)Ïùò CodeType_1 Í∏∞Ï§Ä. ÏÉÅÎã® ÌïÑÌÑ∞Îäî CodeFile_1 ÌÉÄÏûÖÏúºÎ°ú ÌëúÏãúÎ•º Ï†úÏñ¥Ìï©ÎãàÎã§.")

    fk_box = st.container()
    fk_box.write("##### PK vs FK Í¥ÄÍ≥Ñ ÏöîÏïΩ")
    if edges:
        fk_df = _to_fk_df_cached(tuple(edges))
        if len(fk_df) <= 150:
            fk_box.table(fk_df)
        else:
            fk_box.dataframe(fk_df, hide_index=True, height=min(320, 28 * len(fk_df) + 42), use_container_width=False)
    else:
        fk_box.info("ÌëúÏãúÌï† FK Ïó£ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.")

    with st.spinner("Code Relationship Diagram ÏÉùÏÑ± Ï§ë..."):
        png_path = _render_erd(columns_by_table, pk_lookup, edges, node_types_final, out_dir=out_dir)
        try:
            image = Image.open(png_path)
            st.image(image, caption="CodeMapping Í∏∞Î∞ò Code Relationship Diagram", width=img_width)
            st.caption(f"ÌååÏùº: {png_path}")
        except Exception as e:
            st.error(f"Code Relationship Diagram Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ï§ë Ïò§Î•ò: {e}")
